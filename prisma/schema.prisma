generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  password        String
  name            String
  level           String           @default("beginner")
  xp              Int              @default(0)
  streak          Int              @default(0)
  emailVerified   Boolean          @default(false)
  verificationToken VerificationToken?
  lastActivity    DateTime?
  practiceResults PracticeResult[]
  storyProgress   StoryProgress[]
  achievements    Achievement[]
  goals           Goal[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Story {
  id          String          @id @default(uuid())
  title       String
  content     String
  translation String
  level       String
  points      Int            @default(10)
  vocabulary  Vocabulary[]
  questions   Question[]
  progress    StoryProgress[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Question {
  id            String   @id @default(uuid())
  text          String
  translation   String
  options       String[]
  correctAnswer Int
  story         Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Vocabulary {
  id              String   @id @default(uuid())
  word            String
  translation     String
  transliteration String
  story           Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model StoryProgress {
  id                    String   @id @default(uuid())
  userId                String
  storyId               String
  completed             Boolean  @default(false)
  score                 Int?
  timeSpent             Int?     // in seconds
  attemptsCount         Int      @default(0)
  lastAttemptDate       DateTime @default(now())
  bonusCompleted        Boolean  @default(false)
  mistakesMade          Json     // Store question IDs as JSON array
  readWithoutTranslation Boolean @default(false)
  user                  User     @relation(fields: [userId], references: [id])
  story                 Story    @relation(fields: [storyId], references: [id])
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@unique([userId, storyId])
}

model VerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model PracticeResult {
  id         String   @id @default(uuid())
  userId     String
  type       String   // 'speaking', 'writing', 'reading', 'conversation'
  score      Int
  timeSpent  Int      // in seconds
  mistakes   Json     // Array of mistake details
  feedback   String?
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Achievement {
  id          String   @id @default(uuid())
  userId      String
  type        String   // e.g., 'streak_7', 'stories_10', 'perfect_score'
  name        String
  description String
  xpReward    Int
  unlockedAt  DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model Goal {
  id        String   @id @default(uuid())
  userId    String
  type      String   // 'daily_xp', 'stories_completed', 'practice_time'
  target    Int
  progress  Int      @default(0)
  completed Boolean  @default(false)
  endDate   DateTime
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
