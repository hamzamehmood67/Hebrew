// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id       String @id @default(uuid())
//   name     String
//   email    String @unique
//   password String 
// }
// schema.prisma

// User model with authentication and access control
// User model to store user data


// User model to store user data
model User {
  id                         String                 @id @default(uuid())
  email                      String                 @unique
  password                   String
  name                       String
  level                      String                 @default("beginner")
  xp                         Int                    @default(0)
  createdAt                  DateTime               @default(now())
  updatedAt                  DateTime               @default(now()) @updatedAt

  // Relationships
  progress                   Progress[]
  speakingPractices          SpeakingPractice[]
  writingExercises           WritingExercise[]
  readingComprehensions      ReadingComprehension[]
  vocabularyFlashcards       VocabularyFlashcards[]
  grammarExercises           GrammarExercise[]
  listeningPractices         ListeningPractice[]
  learningGames              LearningGame[]
  conversationPracticesAsUser ConversationPractice[] @relation("UserConversation") // Explicit name for user side
  conversationPracticesAsPartner ConversationPractice[] @relation("PartnerConversation") // Explicit name for partner side
}

// Story model to store learning content and its translation
model Story {
  id          String     @id @default(cuid())
  title       String
  content     String
  translation String
  level       String
  points      Int        @default(10)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relationships
  vocabulary  Vocabulary[]
  progress    Progress[]
}

// Vocabulary model for words related to a story
model Vocabulary {
  id             String   @id @default(cuid())
  word           String
  translation    String
  transliteration String
  storyId        String

  // Relationships
  story          Story    @relation(fields: [storyId], references: [id])
}

// Progress model to track user progress in stories
model Progress {
  id          String   @id @default(uuid())
  userId      String
  storyId     String
  completed   Boolean  @default(false)
  score       Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  user        User     @relation(fields: [userId], references: [id])
  story       Story    @relation(fields: [storyId], references: [id])
}

// Tracking models for tools and exercises

model SpeakingPractice {
  id        String   @id @default(uuid())
  userId    String
  audioUrl  String
  feedback  String
  createdAt DateTime @default(now())

  // Relationships
  user      User     @relation(fields: [userId], references: [id])
}

model WritingExercise {
  id        String   @id @default(uuid())
  userId    String
  prompt    String
  submission String
  feedback  String
  createdAt DateTime @default(now())

  // Relationships
  user      User     @relation(fields: [userId], references: [id])
}

model ReadingComprehension {
  id        String   @id @default(uuid())
  userId    String
  text      String
  questions String
  answers   String
  createdAt DateTime @default(now())

  // Relationships
  user      User     @relation(fields: [userId], references: [id])
}

model VocabularyFlashcards {
  id        String   @id @default(uuid())
  userId    String
  word      String
  translation String
  progress  Int      @default(0)
  createdAt DateTime @default(now())

  // Relationships
  user      User     @relation(fields: [userId], references: [id])
}

model GrammarExercise {
  id        String   @id @default(uuid())
  userId    String
  exercise  String
  answer    String
  feedback  String
  createdAt DateTime @default(now())

  // Relationships
  user      User     @relation(fields: [userId], references: [id])
}

model ListeningPractice {
  id        String   @id @default(uuid())
  userId    String
  audioUrl  String
  question  String
  answer    String
  createdAt DateTime @default(now())

  // Relationships
  user      User     @relation(fields: [userId], references: [id])
}

model LearningGame {
  id        String   @id @default(uuid())
  userId    String
  gameName  String
  score     Int      @default(0)
  createdAt DateTime @default(now())

  // Relationships
  user      User     @relation(fields: [userId], references: [id])
}

model ConversationPractice {
  id            String   @id @default(uuid())
  userId        String
  partnerId     String?
  conversation  String
  createdAt     DateTime @default(now())

  // Relationships
  user          User     @relation("UserConversation", fields: [userId], references: [id])
  partner       User?    @relation("PartnerConversation", fields: [partnerId], references: [id])
}


